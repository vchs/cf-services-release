require "rspec/core/rake_task"
require "ci/reporter/rake/rspec"
require "fileutils"
require "digest"

TMP_DIR = File.join(File.dirname(__FILE__), 'tmp')

WEBAPP_RUNNER = {
  :url => "http://agent:AgenT@blobs.sin2.beefstall.info" \
          "/b9/edbf0d5b-6c9c-495f-8a1a-4c653a3b4acc",
  :sha1 => "e7c99aee407826833e7efe9eadf42b6c25025a04",
  :file => "webapp_runner.jar"
}
UAA = {
  :url => "http://agent:AgenT@blobs.sin2.beefstall.info" \
          "/b5/7b65e73d-3d82-4eba-adc9-dea5c85b7a04",
  :sha1 => "c72895660b23f0c19f4d8a0bd186687c8c7011da",
  :file => "uaa.war"
}

verbose(true)

namespace :spec do
  desc "Run unit test"
  RSpec::Core::RakeTask.new(:unit) do |t|
    t.pattern = "spec/unit/**/*_spec.rb"
  end

  desc "Run functional test"
  RSpec::Core::RakeTask.new(:func => :setup) do |t|
    t.pattern = "spec/functional/**/*_spec.rb"
  end

  desc "Run integration test"
  RSpec::Core::RakeTask.new(:integration => :setup) do |t|
    t.pattern = "spec/integration/**/*_spec.rb"
  end

  desc "Git checkout integration-test-support"
  task :checkout_its do
    ref = ENV["ITS_REF"] || "origin/master"
    git_checkout("https://github.com/vchs", "integration-test-support", ref)
  end

  desc "Git checkout service_controller"
  task :checkout_sc do
    ref = ENV["SC_REF"] || "origin/master"
    git_checkout("https://github.com/vchs", "service_controller", ref) do
      Bundler.with_clean_env { sh "bundle install" }
    end
  end

  desc "Git checkout service health manager"
  task :checkout_svc_hm do
    # FIXME checkout code from github instead of copying the code from directory
    repo = "svc_hm"
    FileUtils.cp_r(File.join("..", repo), TMP_DIR)
    Dir.chdir File.join(TMP_DIR, repo) do
      Bundler.with_clean_env { sh "bundle install" }
    end
  end

  desc "Download UAA"
  task :checkout_uaa do
    Dir.chdir File.join(TMP_DIR) do
      [WEBAPP_RUNNER, UAA].each do |app|
        next if File.exist?(app[:file]) &&
          Digest::SHA1.file(app[:file]).hexdigest == app[:sha1]
        sh "wget -O #{app[:file]} #{app[:url]}"
      end
    end
  end

  desc "Setup environment for spec"
  task :setup => [:checkout_its, :checkout_sc, :checkout_svc_hm, :checkout_uaa]

  def git_checkout(base_url, repo, ref)
    FileUtils.mkdir_p TMP_DIR
    Dir.chdir TMP_DIR do
      unless Dir.exists?(repo)
        sh "git clone --recursive #{base_url}/#{repo}"
      end
      Dir.chdir repo do
        sh "git fetch && git clean -dffx && " \
          "git reset --hard #{ref} && git submodule update --init"
        yield if block_given?
      end
    end
  end
end

task :spec => ["spec:unit", "spec:func"]
task :default => :spec
